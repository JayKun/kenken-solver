Testcase for performance test:

N = 4,
C = [
   +(6, [[1|1], [1|2], [2|1]]),
   *(96, [[1|3], [1|4], [2|2], [2|3], [2|4]]),
   -(1, [3|1], [3|2]),
   -(1, [4|1], [4|2]),
   +(8, [[3|3], [4|3], [4|4]]),
   *(2, [[3|4]])
  ],

The solvers are invoked as follows:
statistics(cpu_time, [Start|_])kenken_testcase_1(N,C),kenken(N,C,T),statistics(cpu_time, [Stop|_]).
statistics(cpu_time, [Start|_])kenken_testcase_1(N,C),plain_kenken(N,C,T),statistics(cpu_time, [Stop|_]).

Results:
kenken\3 performed much better than plain_kenken\3 
in terms of run-time and memory.
In particular, plain_kenken needed twice the amount of memory
and 156 times the amount of time
to complete the execution of kenken_testcase_1.

kenken\3:
Memory                        in use            free

   global stack                4 Kb        32763 Kb
   local  stack                3 Kb        16380 Kb

Times              since start      since last		time taken

   user   time       11.765 sec      11.765 sec		0.000 sec
   system time       0.031 sec       0.031 sec		0.000 sec
   cpu    time       12.421 sec      12.422 sec		0.001 sec



plain_kenken\3:
Memory                       in use            free

   global stack               7 Kb        32760 Kb
   local  stack               8 Kb        16375 Kb

Times              since start      since last		time taken

   user   time       11.500 sec      11.593 sec		0.093 sec
   system time       0.610 sec       0.610 sec		0.000 sec
   cpu    time       6.828 sec       6.984 sec		0.156 sec

3. Noop kenken
Let's call this solver noop_kenken(N,C,T,T_C),
where N is the number of rows and columns,
C has the form [(Tar, [R1|C1,R2|C2,...])] just like before but
with Tar being the numerical target,
T is a list of lists containing all the entries with their operations defined,
T_C has the form just like the C argument in our initial kenken solver.
T_C would be the result that contains all the 
necessary arithmetic operations in the form of
[+(S,L), *(P,L), -(D,J,K), /(Q,J,K)].

The idea is similar to our initial implementation.
We first constrain the rows and colums to have distinct numbers 
from 1-N using the length predicate.
Next, we generate every possible arithmetic operation to be performed on C
and perform backtracking based on the constraints to obtain the target number.
This will result in approximately 2 ^ |C|.
Since the arithmetic constraints have 2 forms : 
(S,L) and (D,J,K) we essentially have 2 possibilities for
every single target constraint.


Test case for noop_kenken()
noop_kenken_testcase(
  6,
  [
   (11, [[1|1], [2|1]]),
   (2, [1|2], [1|3]),
   (20, [[1|4], [2|4]]),
   (6, [[1|5], [1|6], [2|6], [3|6]]),
   (3, [2|2], [2|3]),
   (3, [2|5], [3|5]),
   (240, [[3|1], [3|2], [4|1], [4|2]]),
   (6, [[3|3], [3|4]]),
   (6, [[4|3], [5|3]]),
   (7, [[4|4], [5|4], [5|5]]),
   (30, [[4|5], [4|6]]),
   (6, [[5|1], [5|2]]),
   (9, [[5|6], [6|6]]),
   (8, [[6|1], [6|2], [6|3]]),
   (2, [6|4], [6|5])
  ]
).

noop_kenken_testcase(N,C),noop_kenken(N,C,T,T_C).

Expected Output:

C = [ 
   (11, [[1|1], [2|1]]),
   (2, [1|2], [1|3]),
   (20, [[1|4], [2|4]]),
   (6, [[1|5], [1|6], [2|6], [3|6]]),
   (3, [2|2], [2|3]),
(3, [2|5], [3|5]),
(240, [[3|1], [3|2], [4|1], [4|2]]),
   (6, [[3|3], [3|4]]),
   (6, [[4|3], [5|3]]),
   (7, [[4|4], [5|4], [5|5]]),
   (30, [[4|5], [4|6]]),
   (6, [[5|1], [5|2]]),
   (9, [[5|6], [6|6]]),
   (8, [[6|1], [6|2], [6|3]]),
   (2, [6|4], [6|5])
    ]
N = 6
T = [[5,6,3,4,1,2],
     [6,1,4,5,2,3],
     [4,5,2,3,6,1],
     [3,4,1,2,5,6],
     [2,3,6,1,4,5],
     [1,2,5,6,3,4]]
T_C =  [
   +(11, [[1|1], [2|1]]),
   /(2, [1|2], [1|3]),
   *(20, [[1|4], [2|4]]),
   *(6, [[1|5], [1|6], [2|6], [3|6]]),
   -(3, [2|2], [2|3]),
   /(3, [2|5], [3|5]),
   *(240, [[3|1], [3|2], [4|1], [4|2]]),
   *(6, [[3|3], [3|4]]),
   *(6, [[4|3], [5|3]]),
   +(7, [[4|4], [5|4], [5|5]]),
   *(30, [[4|5], [4|6]]),
   *(6, [[5|1], [5|2]]),
   +(9, [[5|6], [6|6]]),
   +(8, [[6|1], [6|2], [6|3]]),
   /(2, [6|4], [6|5])
  ]
